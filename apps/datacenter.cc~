/* -*-	Mode:C++; c-basic-offset:8; tab-width:8; indent-tabs-mode:t -*- */
/*
 * Copyright (c) 1996 Regents of the University of California.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 * 	This product includes software developed by the MASH Research
 * 	Group at the University of California Berkeley.
 * 4. Neither the name of the University nor of the Research Group may be
 *    used to endorse or promote products derived from this software without
 *    specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
static const char rcsid[] =
    "@(#) $Header: /cvsroot/nsnam/ns-2/common/datacenter.cc,v 1.43 $";
#endif

#include <stdlib.h>
#include "datacenter.h"

static class DataCenterClass : public TclClass {
public:
	DataCenterClass() : TclClass("DataCenter") {}
	TclObject* create(int argc, const char*const*argv) {
		return (new DataCenter());
	}
} class_datacenter;

DataCenter::DataCenter()
{	
	i = 0;
	j = 0;
}


DataCenter::~DataCenter()
{
	host_list.~vector();
	agent_list.~vector();
}

void DataCenter::addHostPointer(DcHost *newhst)
{	
	host_list.push_back(newhst);	
}

void DataCenter::addTaskAgentPointer(TskComAgent *newagnt)
{
	agent_list.push_back(newagnt);
}

void DataCenter::receivedTsk(int option_, int pktSize_)
{
	int k = (int)agent_list.size();
	j=i%k;

	tagent_ = agent_list.at(j);	
	
	if (option_ == 0)
		tagent_->set_pkttype(PT_EXP);		
	else if (option_ == 1)
		tagent_->sendmsg(pktSize_, "NEW_BURST");
	else if (option_ == 2)
		tagent_->sendmsg(pktSize_);
	i++;
	if(i > k) i = 0;
}		

//void DataCenter::scheduleTsk(TskComAgent *tskagent) 
//{	
//	To be implemented instead of round robin
//}

int DataCenter::command(int argc, const char*const* argv)
{
	if (argc == 3) {
		if (strcmp(argv[1], "add-dchost") == 0) { 
		  DcHost *hst = dynamic_cast<DcHost*> (TclObject::lookup(argv[2]));
		  if(hst){
			  addHostPointer(hst);
     			  return (TCL_OK);
 		  }
		  return (TCL_ERROR);
	   }
           else if (strcmp(argv[1], "add-taskagent") == 0) { 
		  TskComAgent *agnt = dynamic_cast<TskComAgent*> (TclObject::lookup(argv[2]));
		  if(agnt){
			  addTaskAgentPointer(agnt);
     			  return (TCL_OK);
 		  }
		  return (TCL_ERROR);
	   }
	}
	return (DataCenter::command(argc, argv));	
}
